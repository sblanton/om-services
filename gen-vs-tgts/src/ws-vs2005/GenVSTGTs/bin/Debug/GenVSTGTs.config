###############
# Visual Studio TGT Generator Configuration File
#  - Version 0 : 12.01.08 ADG
#
# Description: GenVSTGT.config is a configuration file that partners with the GenVSTGT.exe executable.
# This configuration file must be found in the same directory where GenVSTGT.exe lives (typically OpenMake's
# client\bin directory). It's purpose is to provide inputs to the command line TGT generator which qualify
# the nature of its scanning for dependencies to the TGTs (namely project and/or solution files) and the 
# generating of TGTs. 
#
# Listed below are keys (beginning with @@ signs) which are provided values that get interpreted by the
# command line executable. All descriptions for the keys are provided in the comment sections above them.
# Some of the keys are required to have value (e.g., 'OMProject') whereas others are optional (e.g., 'Debug').
# If optional values are not provided, 'GenVSTGTs.exe' will use its own defaults (listed in commented sections 
# below).
# 
# Even in the cases where a key's value is required, that value may be provided by the command line.
# The majority of keys values, other than FileTypes, BuildServiceMappings and Includes/Excludes may be passed
# in from the command line. For example, the following call would override the default configuration
# of RELEASE to Debug (CFG=DEBUG), turn off recursive scanning (Recursive=N) and override any default OpenMake 
# Project value set here (OMProject="SAMPLE VSBUILD").
#
# 	GenVSTGTs CFG=DEBUG Recursive=N OMProject="SAMPLE VSBUILD"
#
# Note that any line beginning with a pound (#) sign causes GenVSTGT.exe to exclude it from processing. This is
# useful both for creating comments as well as turning off optional defaults.
###############

###############
# OMProject - required, may be also passed in at command line.
# Sets the default OpenMake Project for which all generated TGTs are generated. The <Project> tag value within the 
# TGT will be based on this setting. It makes sense to set this here for for cases where all TGTs need to be generated
# for the same project, however if calling the utility from an automated build process (e.g., an SCM trigger), for 
# multiple projects, OMProject will need to be set at runtime from the command line by passing in OMProject=<PROJECT NAME>. 
###############
@@OMProject
#PROVIDE PROJECT DEFAULT HERE OR PASS IN AT COMMAND LINE

###############
# Debug - optional, may be also passed in at command line.
# Turns on (Y) or off (N) GenVSTGT.exe's printing of additional debug information. This should only need to be
# used if it appears that the program is not functioning correctly. 
###############
@@Debug
N

###############
# TGTDir - optional, may be also passed in at command line.
# May define a directory value to output all TGTs to a central directory location. The default and generally 
# recommended behavior is to output all TGTs to their dependant Solution or Project directories. Not having TGTDir set
# will force this behavior.
###############
@@TGTDir
#OPTIONALLY PROVIDE TGT OUTPUT PATH HERE E.G. ---> C:\MY\CENTRAL\TGT\PATH

###############
# SolutionBuild - required, may be also passed in at command line.
# Define whether (Y) or not (N) a Solution Build TGT is to be generated. In general a Solution Build will require 
# two dependencies, the Project and Solution File, as well as using a Devenv Compiler Build Service. A non-Solution
# TGT will typically have just the Project File dependencies and will utilize an MSBuild Compiler Build Service
# (See BuildServiceMappings section for Target to Build Service relationships).
# 
# Default is to assume a Solution Build.
###############
@@SolutionBuild
Y

###############
# CFG - required, may be also passed in at command line.
# Sets the Visual Studio configuration to be processed for generating TGT information. Typically Visual Studio Projects
# specify their targets (.dll's, .exe's, etc) to be compiled into the following directory: 
#
# 	<Project Directory>\bin\<ConfigurationName>
# 
# The above standard however is not always used for all configurations (this can be set by the user in the IDE). In cases
# where the above standard is not in use it will be very important to pass in the correct configuration either here or at
# at the command line. Either way, the actualy "ConfigurationName" directory will be swapped out for the $(CFG) in the
# TGT file. It will be important to set CFG correctly prior to running an "om" build.
#
# Default is to look for the RELEASE configuration (case is insensitive) in Project files.
###############
@@CFG
RELEASE

###############
# BaseDir - required, may be also passed in at command line. 
# Sets the base directory from where to scan for TGT dependencies (project/solution files). If set to the default "." value,
# it will scan from the current working directory where GenVSTGTs.exe is executed from.
###############
@@BaseDir
.

###############
# Rel2BaseDir - optional, may be also passed in at command line. 
# Tells 'GenVSTGTs.exe' to set all dependency and target paths within the generated TGTS relative to the basedir. The default
# and generally recommended behavior is to have all project, solution and target paths defined relative to the parent Solution.
# directory as specified with setting 'N'.
###############
@@Rel2BaseDir
N

###############
# Recursive - required, may be also passed in at command line. 
# Tells 'GenVSTGTs.exe' to recursively scan for all matching dependencies from the 'BaseDir' setting. Useful for batch processing
# an entire source tree. Default setting is 'Y' to scan recursively.
###############
@@Recursive
Y

###############
# Incremental - required, may be also passed in at command line. 
# When set to 'Y', 'GenVSTGTs.exe' will generate TGTs incrementally by comparing the date/time stamp of the Solution and/or
# Project dependencies to that of the TGT. If the TGT does not exist or the date/time stamps of the dependencies are newer than
# the TGT, a new one will automatically be created. If set to 'N', TGTs will be created for all matching Solution or Project
# Dependencies regardless of date/time stamp information. Default setting is 'Y' to generate incrementally.
###############
@@Incremental
Y

###############
# FileTypes - required, may not be passed in at command line.
# Specifies the types of dependencies to scan for on the file system for adding to generated TGT files. In general, required FileTypes
# will include the .*proj Project dependency type as well. The .sln Solution dependency type is typically only added for TGTs to be
# used for Solution Builds. The default dependency types are listed below.
###############
@@FileTypes
.sln
.vcproj
.csproj
.vbproj

###############
# BuildServiceMappings - required, may not be passed in at command line.
# Defines the relationship between the Target extension type (generally DLL, EXE or LIB) and the Build Service stored on the KB Server
# and used at build time. The BuildServiceMappings are the only values that have an equals (=) sign in them. It is critical that new
# mappings follow the exact structures listed below. Quotes are not necessary around Build Service names. The target extension type
# is case insensitive. Default Build Service Mappings are defined below for VS 2005 Solution Builds and should be adjusted for non-Solution
# or VS 2008 Builds.
###############
@@BuildServiceMappings
.dll=.NET 2005 Solution Dynamic Link Library
.exe=.NET 2005 Solution Executable
.lib=.NET 2005 Solution Library

###############
# Includes - optional, may not be passed in at command line.
# Include patterns may be specified to force inclusion of specifically named Solution or Project dependencies in the TGT generation
# analysis. Since the default scan behavior without Includes/Excludes is to attempt to process all matching Project and/or Solution file types,
# defining Includes restricts inclusion to ONLY those that match. Therefore, if ANY include patterns are listed below, all excludes will
# be ignored and only those matching the Include pattern will be processed for addition. Standard Windows wildcard rules apply for defining 
# inclusion patterns. Explicit names are also acceptable. Multiple patterns may be listed on separate lines - the inclusion processing is
# additive. Examples are in the comment lines below. 
###############
@@Includes
#SampleA.sln (would include only SampleA.sln file and its associated Projects for Solution build TGT)
#SampleA.csproj (would include only SampleA.csproj for Project build TGT.
#Sample*.sln (would include all Solution files matching Sample*.sln file and their associated Projects for Solution build TGTs)
#Sample*.csproj (would include all Project files matching Sample*.csproj for Project build TGTs)
#*.??proj (would include all Project file types that are 6 letter project file extensions)

###############
# Excludes - optional, may not be passed in at command line.
# If no Includes are defined to restrict inclusion, Excludes patterns may be supplied to restrict the otherwise default of including all
# dependencies that match the Project and/or Solution file types. Standard Windows wildcard rules apply for defining exclusion
# patterns. Explicit names are also acceptable. Multiple patterns may be listed on separate lines - the exclusion processing is
# additive. Examples are in the comment lines below.
###############
@@Excludes
#*Sample.vcproj (would exclude all Project files ending in Sample.vcproj)
#SampleB?t.csproj (would exclude, for example, SampleBat.csproj but not SampleBest.csproj)
#SampleB\SampleB.csproj (would exclude only SampleB.csproj file that is in directory SampleB)